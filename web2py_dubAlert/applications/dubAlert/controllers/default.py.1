# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a sample controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
#########################################################################


import logging
logger = logging.getLogger("web2py.app.dubAlert")
logger.setLevel(logging.DEBUG)

import smtplib

smtpserver = 'smtp.gmail.com:587'
sender = 'warriorsvslakers@gmail.com'
login = 'warriorsvslakers@gmail.com'
password = 'dubnation7!'

import json
from nba_py import team
from nba_py import game
import nba_py
from nba_py import constants
gsw_id = team.TEAMS.get('GSW')['id']
lal_id = team.TEAMS.get('LAL')['id']

gsw_win = False
gsw_record = None

lal_lose = False
lal_record = None

gsw_opp_abb = None
lal_opp_abb = None

gsw_game_score = None
lal_game_score = None

opponent_abb = None
team_record = None
game_score = None


tester = 'kjesse@ucsc.edu'
#email = "anmoljain15@gmail.com"


def index():
    alert()

def alert():
    message = ""
    subject = ""
    set_alert()
    if gsw_win == True or lal_lose == True:
        message, subject = set_message()
        send_email(tester, message, subject, sender)

def team_game(team_id):
    index = -1
    games_json = nba_py.Scoreboard().game_header().to_json()

    #logger.error(games_json)
    games_object = json.loads(games_json)
    for id, home_team in games_object["HOME_TEAM_ID"].iteritems():
        if home_team == int(team_id):
            index = id
            break;
    for id, away_team in games_object["VISITOR_TEAM_ID"].iteritems():

        if away_team == int(team_id):
            index = id
            break;
    if index != -1:
        return games_object["GAME_ID"][index]
    return index

def game_results(game_id, team_id):
    global opponent_abb
    global team_record
    global game_score

    game_json = game.Boxscore(game_id).line_score().to_json()
    game_object = json.loads(game_json)
    for id, team in game_object["TEAM_ID"].iteritems():
        if team == int(team_id):
            index = id
        else:
            opponent = id
            opponent_id = team

    team_record = game_object["TEAM_WINS_LOSSES"][index]
    opponent_abb = game_object["TEAM_ABBREVIATION"][opponent]
    game_score = str(game_object["PTS"][index]) + "-" + str(game_object["PTS"][opponent])

    if game_object["PTS"][index]>game_object["PTS"][opponent]:
        return constants.Outcome.Win
    return constants.Outcome.Loss

def set_alert():
    global gsw_win, lal_lose
    global gsw_opp_abb, lal_opp_abb
    global gsw_record, lal_record
    global gsw_game_score, lal_game_score

     #if gsw played today
    game_id = -1
    game_id = team_game(gsw_id)
    if game_id != -1:
        if game_results(game_id, gsw_id) == constants.Outcome.Win:
            gsw_win = True
            gsw_record = team_record
            gsw_opp_abb = opponent_abb
            gsw_game_score = game_score

    #if lal played today
    game_id = -1
    game_id = team_game(lal_id)
    if game_id != -1:
        if game_results(game_id, lal_id) == constants.Outcome.Loss:
            lal_lose = True
            lal_record = team_record
            lal_opp_abb = opponent_abb
            lal_game_score = game_score

def set_message():
    #global gsw_record, lal_record
    message = ""
    subject = ""
    message1 = "The Golden State Warriors beat the " + constants.TEAMS.get(str(gsw_opp_abb))["city"]  + " " + \
                  constants.TEAMS.get(str(gsw_opp_abb))["name"] + " " + str(gsw_game_score) + " to improve to " + str(gsw_record) +\
                  "!\n\n" if gsw_win else ""
    subject1 = "GSW vs " + str(gsw_opp_abb) if gsw_win else ""

    message2 = "Did you know that the Los Angeles Lakers lost to the " + constants.TEAMS.get(str(lal_opp_abb))["city"] + " " + \
             constants.TEAMS.get(str(lal_opp_abb))["name"] + " " + str(lal_game_score) + " tanking further to a " + str(lal_record) \
             + " record.\n\n" if lal_lose else ""
    subject2 = "LAL vs " + str(lal_opp_abb) if lal_lose else ""

    if gsw_win and lal_lose:
        subject = subject1 + " and " + subject2 + " results"
        message = message1 + " " + message2
    elif gsw_win:
        subject = subject1 + " results"
        message = message1
    elif lal_lose:
        subject = subject2 + " results"
        message = message2
    message += "You should really reconsider and join Dub Nation!\n\n Thanks,\n Your favorite Warriors Fan"

    return message, subject

def send_email(to, message, subject, sender):
    from email.mime.multipart import MIMEMultipart
    from email.mime.text import MIMEText

    # me == my email address
    # you == recipient's email address
    me = sender
    you = tester

    # Create message container - the correct MIME type is multipart/alternative.
    msg = MIMEMultipart('alternative')
    msg['Subject'] = "Link" + message
    msg['From'] = me
    msg['To'] = you

    # Create the body of the message (a plain-text and an HTML version).
    text = "Hi!\nHow are you?\nHere is the link you wanted:\nhttp://www.python.org"
    html = """\
    <html>
      <head></head>
      <body>
        <p>Hi!<br>
           How are you?<br>
           Here is the <a href="http://www.python.org">link</a> you wanted.
        </p>
      </body>
    </html>
    """

    # Record the MIME types of both parts - text/plain and text/html.
    part1 = MIMEText(text, 'plain')
    part2 = MIMEText(html, 'html')

    # Attach parts into message container.
    # According to RFC 2046, the last part of a multipart message, in this case
    # the HTML message, is best and preferred.
    msg.attach(part1)
    msg.attach(part2)
    # Send the message via local SMTP server.
    mail = smtplib.SMTP('smtp.gmail.com', 587)

    mail.ehlo()

    mail.starttls()

    mail.login(login, password)
    mail.sendmail(me, you, msg.as_string())
    mail.quit()
def user():
    return dict(form=auth())


@cache.action()
def download():
    return response.download(request, db)


def call():
    return service()
